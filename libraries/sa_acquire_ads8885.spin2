CON
    SLEEP = $FF

    DIN    = 24
    SCLK   = 26
    DOUT   = 28
    CONVST = 30

{ params
N		long
fixint		long
buffer		long
pin		long
cycles		long
ready_flag	long
}

PUB start(params)
    cognew (@acquire_entry, params)


PUB  module_name
    result := string ("sa_acquire_ads8885")


DAT
		ORG	0

acquire_entry	rdlong  N, PTRA++
		rdlong	fixint, PTRA++
		rdlong	t, PTRA++
		rdlong	adc_pin, PTRA++
		rdlong	adc_cycles, PTRA++
		mov	ready_addr, PTRA
		add	PTRA, #4
		rdlong  adc_repeat, PTRA

		mov	PTRA, t
		decod   size, N
		mov	fixfract, #32
		sub	fixfract, fixint

		dirl	#DOUT
		dirh	#SCLK
		dirh	#CONVST
		dirh	#DIN
		outh	#DIN
		
.loop		rdbyte	t, ready_addr
		cmp	t, #0  wz
	if_z	jmp	#.loop

		cmp	t, #SLEEP  wz
	if_z	waitx	##1024
	if_z	jmp	#.loop

		call	#acquire	' read ADC samples
	'	call	#remove_dc	' subtract the mean

		wrbyte  #0, ready_addr
		jmp	#.loop



{ generic scan of array }

iterate	        cmp	iter_action, #0  wz
	if_z	jmp	iterate_ret
	
		mov	count, size
		cmp	half, #0  wz
	if_nz	shr	count, #1
	if_nz	add	count, #1
		mov	PTRB, PTRA
.loop
		rdlong	x, PTRB++
		rdlong	y, PTRB--
		call	iter_action
		wrlong	x, PTRB++
		wrlong	y, PTRB++
		djnz	count, #.loop
iterate_ret	ret

iter_action	long	0
half		long	0



{ multiply fixpoint }
mult		QMUL	a, b
		testb	a, #31  wc
		testb	b, #31  wz
		GETQY   val
		GETQX   lo
	if_c	sub	val, b
	if_z	sub	val, a
		shl	val, fixint
		shr	lo, fixfract
		or	val, lo
mult_ret	ret




		
acq_sample
		decod	rcount, adc_repeat
		mov	x, #0
.loop
		waitct1
		addct1  time, adc_cycles
		call	#read8885
		signx	val, #17
		add	x, val
		djnz	rcount, #.loop

		mov	t, #32-18
		sub	t, fixint
		sub	t, adc_repeat
		add	t, #1

		cmp	t, #0  wcz
	if_ae	shl	x, t
	if_b	neg	t
	if_b	sar	x, t
{
		sar	x, adc_repeat
		shl	x, #32-18
		sar	x, fixint
		shl	x, #1
}
'		mul	x, cal_mult
'		shl	x, cal_shift
		mov	y, #0
		ret


acquire		getct   time
		addct1  time, adc_cycles


		mov	count, #20    ' spin up conversions to steady everything
.loop		call	#acq_sample
		djnz	count, #.loop
		
		mov	iter_action, #acq_sample
		call	#iterate

		dirl	adc_pin
		ret


read8885	outh	#CONVST
		mov	bcount, #18
		mov	val, #0
		waitx	#216-6
		outl	#CONVST
		nop
		nop
bloop
		outh	#SCLK
		nop
		nop
		testp	#dout  wc
		outl	#SCLK
		rcl	val, #1
		djnz	bcount, #bloop
		ret


{ calc mean and subtract from samples }

remove_dc
		mov	hi, #0
		mov	lo, #0

		mov	iter_action, #remove1
		call	#iterate

		mov	t, #32
		sub	t, N
		shl	hi, t
		shr	lo, N
		or	hi, lo

		mov	iter_action, #remove2
		jmp	#iterate    ' tail call


remove1		testb   x, #31  wz
		add	lo, x  wc
		addx	hi, #0
	if_z	sub	hi, #1
remove1_ret	ret

remove2		sub	x, hi		' subtract DC offset
remove2_ret	ret


N		res     1
size		res     1
fixint		res	1
fixfract	res	1
adc_pin		res	1
adc_cycles	res     1
adc_repeat	res	1
rough_shift	res	1
ready_addr	res	1
count		res	1
bcount		res	1
rcount		res	1
time		res	1
val		res	1
a		res	1
b		res	1
t		res	1
x		res	1
y		res	1
hi		res	1
lo		res	1
x2		res	1
x3		res	1
x4		res	1


		FIT	$1EC
